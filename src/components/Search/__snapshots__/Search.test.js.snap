// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`---------- Search.js, dumb component ---------- should match its empty snapshot 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SearchContainer />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h3>
          Add your ingredients
</h3>,
        <SearchForm
          onAddIngredient={[Function]}
/>,
        <IngredientHolder
          ingredients={undefined}
          onRemoveIngredient={[Function]}
/>,
        <Button
          as="button"
          basic={true}
          circular={true}
          fluid={true}
>
          Search
</Button>,
      ],
      "className": "search-container",
      "style": Object {
        "backgroundImage": "url(cocktail-background.jpg)",
      },
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Add your ingredients",
        },
        "ref": null,
        "rendered": "Add your ingredients",
        "type": "h3",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "onAddIngredient": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "ingredients": undefined,
          "onRemoveIngredient": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "as": "button",
          "basic": true,
          "children": "Search",
          "circular": true,
          "fluid": true,
        },
        "ref": null,
        "rendered": "Search",
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h3>
            Add your ingredients
</h3>,
          <SearchForm
            onAddIngredient={[Function]}
/>,
          <IngredientHolder
            ingredients={undefined}
            onRemoveIngredient={[Function]}
/>,
          <Button
            as="button"
            basic={true}
            circular={true}
            fluid={true}
>
            Search
</Button>,
        ],
        "className": "search-container",
        "style": Object {
          "backgroundImage": "url(cocktail-background.jpg)",
        },
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Add your ingredients",
          },
          "ref": null,
          "rendered": "Add your ingredients",
          "type": "h3",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "onAddIngredient": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "ingredients": undefined,
            "onRemoveIngredient": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "as": "button",
            "basic": true,
            "children": "Search",
            "circular": true,
            "fluid": true,
          },
          "ref": null,
          "rendered": "Search",
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`----------- SearchForm.js -------------- should match its empty snapshot 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <SearchForm
    onAddIngredient={[Function]}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "as": "form",
      "children": <Autosuggest
        alwaysRenderSuggestions={false}
        focusInputOnSuggestionClick={true}
        getSuggestionValue={[Function]}
        highlightFirstSuggestion={false}
        id="1"
        inputProps={
                Object {
                        "onChange": [Function],
                        "onKeyPress": [Function],
                        "placeholder": "Enter you ingredients and hit enter",
                        "value": "",
                      }
        }
        multiSection={false}
        onSuggestionsClearRequested={[Function]}
        onSuggestionsFetchRequested={[Function]}
        renderSuggestion={[Function]}
        renderSuggestionsContainer={[Function]}
        shouldRenderSuggestions={[Function]}
        suggestions={Array []}
        theme={
                Object {
                        "container": "react-autosuggest__container",
                        "containerOpen": "react-autosuggest__container--open",
                        "input": "react-autosuggest__input",
                        "inputFocused": "react-autosuggest__input--focused",
                        "inputOpen": "react-autosuggest__input--open",
                        "sectionContainer": "react-autosuggest__section-container",
                        "sectionContainerFirst": "react-autosuggest__section-container--first",
                        "sectionTitle": "react-autosuggest__section-title",
                        "suggestion": "react-autosuggest__suggestion",
                        "suggestionFirst": "react-autosuggest__suggestion--first",
                        "suggestionHighlighted": "react-autosuggest__suggestion--highlighted",
                        "suggestionsContainer": "react-autosuggest__suggestions-container",
                        "suggestionsContainerOpen": "react-autosuggest__suggestions-container--open",
                        "suggestionsList": "react-autosuggest__suggestions-list",
                      }
        }
/>,
      "size": "large",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "alwaysRenderSuggestions": false,
        "focusInputOnSuggestionClick": true,
        "getSuggestionValue": [Function],
        "highlightFirstSuggestion": false,
        "id": "1",
        "inputProps": Object {
          "onChange": [Function],
          "onKeyPress": [Function],
          "placeholder": "Enter you ingredients and hit enter",
          "value": "",
        },
        "multiSection": false,
        "onSuggestionsClearRequested": [Function],
        "onSuggestionsFetchRequested": [Function],
        "renderSuggestion": [Function],
        "renderSuggestionsContainer": [Function],
        "shouldRenderSuggestions": [Function],
        "suggestions": Array [],
        "theme": Object {
          "container": "react-autosuggest__container",
          "containerOpen": "react-autosuggest__container--open",
          "input": "react-autosuggest__input",
          "inputFocused": "react-autosuggest__input--focused",
          "inputOpen": "react-autosuggest__input--open",
          "sectionContainer": "react-autosuggest__section-container",
          "sectionContainerFirst": "react-autosuggest__section-container--first",
          "sectionTitle": "react-autosuggest__section-title",
          "suggestion": "react-autosuggest__suggestion",
          "suggestionFirst": "react-autosuggest__suggestion--first",
          "suggestionHighlighted": "react-autosuggest__suggestion--highlighted",
          "suggestionsContainer": "react-autosuggest__suggestions-container",
          "suggestionsContainerOpen": "react-autosuggest__suggestions-container--open",
          "suggestionsList": "react-autosuggest__suggestions-list",
        },
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "as": "form",
        "children": <Autosuggest
          alwaysRenderSuggestions={false}
          focusInputOnSuggestionClick={true}
          getSuggestionValue={[Function]}
          highlightFirstSuggestion={false}
          id="1"
          inputProps={
                    Object {
                              "onChange": [Function],
                              "onKeyPress": [Function],
                              "placeholder": "Enter you ingredients and hit enter",
                              "value": "",
                            }
          }
          multiSection={false}
          onSuggestionsClearRequested={[Function]}
          onSuggestionsFetchRequested={[Function]}
          renderSuggestion={[Function]}
          renderSuggestionsContainer={[Function]}
          shouldRenderSuggestions={[Function]}
          suggestions={Array []}
          theme={
                    Object {
                              "container": "react-autosuggest__container",
                              "containerOpen": "react-autosuggest__container--open",
                              "input": "react-autosuggest__input",
                              "inputFocused": "react-autosuggest__input--focused",
                              "inputOpen": "react-autosuggest__input--open",
                              "sectionContainer": "react-autosuggest__section-container",
                              "sectionContainerFirst": "react-autosuggest__section-container--first",
                              "sectionTitle": "react-autosuggest__section-title",
                              "suggestion": "react-autosuggest__suggestion",
                              "suggestionFirst": "react-autosuggest__suggestion--first",
                              "suggestionHighlighted": "react-autosuggest__suggestion--highlighted",
                              "suggestionsContainer": "react-autosuggest__suggestions-container",
                              "suggestionsContainerOpen": "react-autosuggest__suggestions-container--open",
                              "suggestionsList": "react-autosuggest__suggestions-list",
                            }
          }
/>,
        "size": "large",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "alwaysRenderSuggestions": false,
          "focusInputOnSuggestionClick": true,
          "getSuggestionValue": [Function],
          "highlightFirstSuggestion": false,
          "id": "1",
          "inputProps": Object {
            "onChange": [Function],
            "onKeyPress": [Function],
            "placeholder": "Enter you ingredients and hit enter",
            "value": "",
          },
          "multiSection": false,
          "onSuggestionsClearRequested": [Function],
          "onSuggestionsFetchRequested": [Function],
          "renderSuggestion": [Function],
          "renderSuggestionsContainer": [Function],
          "shouldRenderSuggestions": [Function],
          "suggestions": Array [],
          "theme": Object {
            "container": "react-autosuggest__container",
            "containerOpen": "react-autosuggest__container--open",
            "input": "react-autosuggest__input",
            "inputFocused": "react-autosuggest__input--focused",
            "inputOpen": "react-autosuggest__input--open",
            "sectionContainer": "react-autosuggest__section-container",
            "sectionContainerFirst": "react-autosuggest__section-container--first",
            "sectionTitle": "react-autosuggest__section-title",
            "suggestion": "react-autosuggest__suggestion",
            "suggestionFirst": "react-autosuggest__suggestion--first",
            "suggestionHighlighted": "react-autosuggest__suggestion--highlighted",
            "suggestionsContainer": "react-autosuggest__suggestions-container",
            "suggestionsContainerOpen": "react-autosuggest__suggestions-container--open",
            "suggestionsList": "react-autosuggest__suggestions-list",
          },
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`------------ IngredientHolder.js ---------------- should match its empty snapshot 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <IngredientHolder
    ingredients={
        Array [
            "apple",
            "bananas",
          ]
    }
    onRemoveIngredient={[Function]}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <Label
          color="red"
          size="tiny"
          value="apple"
>
          apple
          <Icon
                    as="i"
                    name="delete"
                    onClick={[Function]}
          />
</Label>,
        <Label
          color="orange"
          size="tiny"
          value="bananas"
>
          bananas
          <Icon
                    as="i"
                    name="delete"
                    onClick={[Function]}
          />
</Label>,
      ],
      "className": "ingredients-holder",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": "0",
        "nodeType": "class",
        "props": Object {
          "children": Array [
            "apple",
            <Icon
              as="i"
              name="delete"
              onClick={[Function]}
/>,
          ],
          "color": "red",
          "size": "tiny",
          "value": "apple",
        },
        "ref": null,
        "rendered": Array [
          "apple",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "as": "i",
              "name": "delete",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "1",
        "nodeType": "class",
        "props": Object {
          "children": Array [
            "bananas",
            <Icon
              as="i"
              name="delete"
              onClick={[Function]}
/>,
          ],
          "color": "orange",
          "size": "tiny",
          "value": "bananas",
        },
        "ref": null,
        "rendered": Array [
          "bananas",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "as": "i",
              "name": "delete",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <Label
            color="red"
            size="tiny"
            value="apple"
>
            apple
            <Icon
                        as="i"
                        name="delete"
                        onClick={[Function]}
            />
</Label>,
          <Label
            color="orange"
            size="tiny"
            value="bananas"
>
            bananas
            <Icon
                        as="i"
                        name="delete"
                        onClick={[Function]}
            />
</Label>,
        ],
        "className": "ingredients-holder",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": "0",
          "nodeType": "class",
          "props": Object {
            "children": Array [
              "apple",
              <Icon
                as="i"
                name="delete"
                onClick={[Function]}
/>,
            ],
            "color": "red",
            "size": "tiny",
            "value": "apple",
          },
          "ref": null,
          "rendered": Array [
            "apple",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "as": "i",
                "name": "delete",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "1",
          "nodeType": "class",
          "props": Object {
            "children": Array [
              "bananas",
              <Icon
                as="i"
                name="delete"
                onClick={[Function]}
/>,
            ],
            "color": "orange",
            "size": "tiny",
            "value": "bananas",
          },
          "ref": null,
          "rendered": Array [
            "bananas",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "as": "i",
                "name": "delete",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
